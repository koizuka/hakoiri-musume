name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  # Detect which files have changed to determine if we need to run CI
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      app: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          base: main
          filters: |
            app:
              - 'src/**'
              - 'public/**'
              - 'package*.json'
              - 'tsconfig*.json'
              - 'vite.config.ts'
              - 'vitest.config.ts'
              - 'postcss.config.js'
              - 'tailwind.config.js'
              - 'eslint.config.js'
              - 'index.html'
              - 'components.json'
              - '.github/workflows/ci.yml'

  test:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.app == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run typecheck

    - name: Run lint
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: dist
        path: dist/

  # Deploy PR preview (only on PRs with Node 20.x)
  pr-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: |
      github.event_name == 'pull_request' && 
      needs.changes.outputs.app == 'true'
    
    # Use shared concurrency group for all deployments
    concurrency:
      group: "github-pages-deployment"
      cancel-in-progress: false

    steps:
      - name: Checkout PR
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with PR-specific base path
        run: |
          # Create a temporary vite config for PR preview
          cat > vite.config.pr.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'
          import path from 'path'

          export default defineConfig({
            plugins: [react()],
            base: '/hakoiri-musume/pr/${{ github.event.pull_request.number }}/',
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
              },
            },
          })
          EOF
          
          # Build with the PR-specific config
          npx vite build --config vite.config.pr.ts

      - name: Checkout gh-pages branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy to PR subdirectory
        id: deploy
        run: |
          # Create PR-specific directory
          mkdir -p gh-pages/pr/${{ github.event.pull_request.number }}
          
          # Copy built files to PR directory
          cp -r dist/* gh-pages/pr/${{ github.event.pull_request.number }}/
          
          # Commit and push
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to deploy - preview is already up to date"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Deploy PR #${{ github.event.pull_request.number }} preview"
            git push
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Initial PR Comment
        if: steps.deploy.outputs.has_changes == 'true'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            
            // Create initial "in progress" comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: `<!-- PR Preview Comment -->
            ## üöß Preview Deployment in Progress...
            
            Your preview is being deployed. Please wait a moment.
            
            > This comment will be updated with the preview URL once deployment is complete.
            `,
            });

      - name: Wait for GitHub Pages deployment
        if: steps.deploy.outputs.has_changes == 'true'
        run: sleep 60

      - name: Update PR Comment with Preview URL
        if: steps.deploy.outputs.has_changes == 'true'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const pr_number = context.payload.pull_request.number;
            const preview_url = `https://koizuka.github.io/hakoiri-musume/pr/${pr_number}/`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('<!-- PR Preview Comment -->')
            );
            
            const commentBody = `<!-- PR Preview Comment -->
            ## üöÄ Preview Deployed!
            
            Your preview is available at: ${preview_url}
            
            > This preview will be automatically removed when the PR is closed.
            `;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment (fallback)
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: commentBody,
              });
            }

  # Summary job that provides a single status check for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Checking CI results..."
          echo "App changes: ${{ needs.changes.outputs.app }}"

          # Check if any tests were supposed to run
          if [[ "${{ needs.changes.outputs.app }}" == "true" ]]; then
            echo "Tests were executed. Checking results..."
            
            # Check if any job failed
            if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
              echo "‚ùå CI failed: One or more tests failed"
              exit 1
            fi
            
            # Check if any job was cancelled
            if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
              echo "‚ö†Ô∏è CI cancelled: One or more jobs were cancelled"
              exit 1
            fi
            
            echo "‚úÖ All tests passed!"
          else
            echo "‚úÖ No code changes detected - skipping tests"
          fi

          echo "CI completed successfully!"